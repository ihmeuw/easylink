import atexit
import os
import tempfile
from pathlib import Path
from typing import TextIO

from linker.utilities.slurm_utils import get_slurm_drmaa, submit_spark_cluster_job


def build_cluster(environment_file: Path) -> str:
    """Builds a Spark cluster.

    Returns:
        spark_master_url: Spark master URL.
    """
    drmaa = get_slurm_drmaa()
    session = drmaa.Session()
    session.initialize()

    spark_master_url = ""

    # TODO: Read environment file

    # call build_launch_script
    launcher = build_cluster_launch_script()

    # TODO: update these for configuration
    # submit job
    submit_spark_cluster_job(
        session=session,
        launcher=launcher,
        account="proj_simscience",
        partition="all.q",
        memory_per_node=8,
        max_runtime=1,
        num_workers=2,
        cpus_per_task=5,
    )

    # grep log for spark master url or is there a better approach?

    return spark_master_url


def build_cluster_launch_script() -> TextIO:
    """Generates a shell file that, on execution, spins up a Spark cluster."""
    launcher = tempfile.NamedTemporaryFile(
        mode="w",
        dir=".",
        prefix="spark_cluster_launcher_",
        suffix=".sh",
        delete=False,
    )

    # output_dir = str(worker_settings_file.resolve().parent)

    # TODO: handle .cluster.ihme.washington.edu
    launcher.write(
        f"""
#!/bin/bash
#start_spark_slurm.sh automatically generated by linker

unset SPARK_HOME
CONDA_PATH=/opt/conda/condabin/conda # must be accessible within container
CONDA_ENV=spark_cluster
SINGULARITY_IMG=image.sif

export SPARK_ROOT=/opt/spark # within the container
export SPARK_WORKER_DIR=$HOME/.spark_temp/logs
export SPARK_LOCAL_DIRS=$HOME/.spark_temp/logs
export SPARK_MASTER_PORT=28508
export SPARK_MASTER_WEBUI_PORT=28509
export SPARK_WORKER_CORES=$SLURM_CPUS_PER_TASK
export SPARK_DAEMON_MEMORY=$(( $SLURM_MEM_PER_CPU * $SLURM_CPUS_PER_TASK / 2 ))m
export SPARK_MEM=$SPARK_DAEMON_MEMORY

# This section will be run when started by sbatch
if [ "$1" != 'multi_job' ]; then
    this=$0
    mkdir -p "$HOME/.spark_temp"
    script=$HOME/.spark_temp/${{SLURM_JOBID}}_$( basename -- "$0" )
    cp "$this" "$script"

    srun "$script multi_job"
# If run by srun, then decide by $SLURM_PROCID whether we are master or worker
else
    if [ "$SLURM_PROCID" -eq 0 ]; then
        HOSTNAME=$(hostname)
        # TODO: use fqdn from configuration
        export SPARK_MASTER_IP="$HOSTNAME.cluster.ihme.washington.edu"
        MASTER_NODE=$( scontrol show hostname "$SLURM_NODELIST "| head -n 1 )

        mkdir -p "/tmp/pvs_like_case_study_spark_local_$USER"
        singularity exec -B /mnt:/mnt,"/tmp/pvs_like_case_study_spark_local_$USER":/tmp $SINGULARITY_IMG \
         $CONDA_PATH run --no-capture-output -n $CONDA_ENV "$SPARK_ROOT/bin/spark-class" \
         org.apache.spark.deploy.master.Master --host "$SPARK_MASTER_IP" --port "$SPARK_MASTER_PORT" \
         --webui-port "$SPARK_MASTER_WEBUI_PORT"
    else
        # TODO: This step assumes that SLURM_PROCID=0 corresponds to the first node in SLURM_NODELIST.
        #  Is this reasonable?
        MASTER_NODE=spark://$( scontrol show hostname "$SLURM_NODELIST" | head -n 1 ):"$SPARK_MASTER_PORT"

        mkdir -p "/tmp/pvs_like_case_study_spark_local_$USER"
        singularity exec -B /mnt:/mnt,"/tmp/pvs_like_case_study_spark_local_$USER":/tmp "$SINGULARITY_IMG" \
        "$CONDA_PATH" run --no-capture-output -n "$CONDA_ENV" "$SPARK_ROOT/bin/spark-class" \
         org.apache.spark.deploy.worker.Worker "$MASTER_NODE"
    fi
fi
"""
    )
    launcher.close()

    # TODO: handle cleanup, but not here!!
    # atexit.register(lambda: os.remove(launcher.name))
    return launcher
