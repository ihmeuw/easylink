from linker.utilities import validation_utils
rule all:
    input:
        final_output=['{snake_dir}/result.parquet'],
        validation='{snake_dir}/input_validations/final_validator'
message: 'Grabbing final output' 
rule:
    name: "results_validator"
    input: ['{snake_dir}/result.parquet']
    output: touch("{snake_dir}/input_validations/final_validator")
    localrule: True         
    message: "Validating results input"
    run:
        for f in input:
            validation_utils.validate_input_file_dummy(f)
rule:
    name: "step_1_python_pandas_validator"
    input: ['{test_dir}/input_data1/file1.csv', '{test_dir}/input_data2/file2.csv']
    output: touch("{snake_dir}/input_validations/step_1_python_pandas_validator")
    localrule: True         
    message: "Validating step_1_python_pandas input"
    run:
        for f in input:
            validation_utils.validate_input_file_dummy(f)
rule:
    name: "step_1_python_pandas"
    message: "Running Implementation step_1_python_pandas"
    input:
        implementation_inputs=['{test_dir}/input_data1/file1.csv', '{test_dir}/input_data2/file2.csv'],
        validation="{snake_dir}/input_validations/step_1_python_pandas_validator"
    output: ['{snake_dir}/intermediate/1_step_1/result.parquet']
    log: "{snake_dir}/diagnostics/1_step_1/step_1_python_pandas-output.log"
    container: "/mnt/team/simulation_science/priv/engineering/er_ecosystem/images/python_pandas.sif"
    resources:
        slurm_partition='some-partition',
        mem=42,
        runtime=42,
        nodes=42,
        slurm_extra="--output '{snake_dir}/diagnostics/1_step_1/step_1_python_pandas-slurm-%j.log'"

    shell:
        '''
        export DUMMY_CONTAINER_MAIN_INPUT_FILE_PATHS={test_dir}/input_data1/file1.csv,{test_dir}/input_data2/file2.csv
        export DUMMY_CONTAINER_OUTPUT_PATHS={snake_dir}/intermediate/1_step_1/result.parquet
        export DUMMY_CONTAINER_DIAGNOSTICS_DIRECTORY={snake_dir}/diagnostics/1_step_1
        python /dummy_step.py > {log} 2>&1
        '''
rule:
    name: "step_2_python_pandas_validator"
    input: ['{snake_dir}/intermediate/1_step_1/result.parquet']
    output: touch("{snake_dir}/input_validations/step_2_python_pandas_validator")
    localrule: True         
    message: "Validating step_2_python_pandas input"
    run:
        for f in input:
            validation_utils.validate_input_file_dummy(f)
rule:
    name: "step_2_python_pandas"
    message: "Running Implementation step_2_python_pandas"
    input:
        implementation_inputs=['{snake_dir}/intermediate/1_step_1/result.parquet'],
        validation="{snake_dir}/input_validations/step_2_python_pandas_validator"
    output: ['{snake_dir}/result.parquet']
    log: "{snake_dir}/diagnostics/2_step_2/step_2_python_pandas-output.log"
    container: "/mnt/team/simulation_science/priv/engineering/er_ecosystem/images/python_pandas.sif"
    resources:
        slurm_partition='some-partition',
        mem=42,
        runtime=42,
        nodes=42,
        slurm_extra="--output '{snake_dir}/diagnostics/2_step_2/step_2_python_pandas-slurm-%j.log'"

    shell:
        '''
        export DUMMY_CONTAINER_MAIN_INPUT_FILE_PATHS={snake_dir}/intermediate/1_step_1/result.parquet
        export DUMMY_CONTAINER_OUTPUT_PATHS={snake_dir}/result.parquet
        export DUMMY_CONTAINER_DIAGNOSTICS_DIRECTORY={snake_dir}/diagnostics/2_step_2
        python /dummy_step.py > {log} 2>&1
        '''